diff -urNp php-7.2.34-orig/ext/intl/breakiterator/codepointiterator_internal.cpp php-7.2.34-dwok/ext/intl/breakiterator/codepointiterator_internal.cpp
--- php-7.2.34-orig/ext/intl/breakiterator/codepointiterator_internal.cpp	2020-12-08 21:09:55.961605638 +0100
+++ php-7.2.34-dwok/ext/intl/breakiterator/codepointiterator_internal.cpp	2020-12-08 21:10:55.378507625 +0100
@@ -59,7 +59,7 @@ CodePointBreakIterator& CodePointBreakIt
 		return *this;
 	}
 
-	this->fText = utext_clone(this->fText, that.fText, FALSE, TRUE, &uec);
+	this->fText = utext_clone(this->fText, that.fText, false, true, &uec);
 
 	//don't bother copying the character iterator, getText() is deprecated
 	clearCurrentCharIter();
@@ -79,17 +79,17 @@ CodePointBreakIterator::~CodePointBreakI
 UBool CodePointBreakIterator::operator==(const BreakIterator& that) const
 {
 	if (typeid(*this) != typeid(that)) {
-		return FALSE;
+		return false;
 	}
 
 	const CodePointBreakIterator& that2 =
 		static_cast<const CodePointBreakIterator&>(that);
 
 	if (!utext_equals(this->fText, that2.fText)) {
-		return FALSE;
+		return false;
 	}
 
-	return TRUE;
+	return true;
 }
 
 CodePointBreakIterator* CodePointBreakIterator::clone(void) const
@@ -110,7 +110,7 @@ CharacterIterator& CodePointBreakIterato
 
 UText *CodePointBreakIterator::getUText(UText *fillIn, UErrorCode &status) const
 {
-	return utext_clone(fillIn, this->fText, FALSE, TRUE, &status);
+	return utext_clone(fillIn, this->fText, false, true, &status);
 }
 
 void CodePointBreakIterator::setText(const UnicodeString &text)
@@ -129,7 +129,7 @@ void CodePointBreakIterator::setText(UTe
 		return;
 	}
 
-	this->fText = utext_clone(this->fText, text, FALSE, TRUE, &status);
+	this->fText = utext_clone(this->fText, text, false, true, &status);
 
 	clearCurrentCharIter();
 }
@@ -281,7 +281,7 @@ CodePointBreakIterator &CodePointBreakIt
 	}
 
 	int64_t pos = utext_getNativeIndex(this->fText);
-	this->fText = utext_clone(this->fText, input, FALSE, TRUE, &status);
+	this->fText = utext_clone(this->fText, input, false, true, &status);
 	if (U_FAILURE(status)) {
 		return *this;
 	}
diff -urNp php-7.2.34-orig/ext/intl/collator/collator_sort.c php-7.2.34-dwok/ext/intl/collator/collator_sort.c
--- php-7.2.34-orig/ext/intl/collator/collator_sort.c	2020-12-08 21:09:56.025606610 +0100
+++ php-7.2.34-dwok/ext/intl/collator/collator_sort.c	2020-12-08 21:10:14.265883512 +0100
@@ -346,7 +346,7 @@ static void collator_sort_internal( int
  */
 PHP_FUNCTION( collator_sort )
 {
-	collator_sort_internal( TRUE, INTERNAL_FUNCTION_PARAM_PASSTHRU );
+	collator_sort_internal( true, INTERNAL_FUNCTION_PARAM_PASSTHRU );
 }
 /* }}} */
 
@@ -540,7 +540,7 @@ PHP_FUNCTION( collator_sort_with_sort_ke
  */
 PHP_FUNCTION( collator_asort )
 {
-	collator_sort_internal( FALSE, INTERNAL_FUNCTION_PARAM_PASSTHRU );
+	collator_sort_internal( false, INTERNAL_FUNCTION_PARAM_PASSTHRU );
 }
 /* }}} */
 
diff -urNp php-7.2.34-orig/ext/intl/dateformat/dateformat_attr.c php-7.2.34-dwok/ext/intl/dateformat/dateformat_attr.c
--- php-7.2.34-orig/ext/intl/dateformat/dateformat_attr.c	2020-12-08 21:09:56.021606549 +0100
+++ php-7.2.34-dwok/ext/intl/dateformat/dateformat_attr.c	2020-12-08 21:10:31.234141105 +0100
@@ -88,7 +88,7 @@ PHP_FUNCTION( datefmt_get_pattern )
 	UChar  value_buf[64];
 	uint32_t    length = USIZE( value_buf );
 	UChar* value  = value_buf;
-	zend_bool   is_pattern_localized =FALSE;
+	zend_bool   is_pattern_localized = false;
 
 	DATE_FORMAT_METHOD_INIT_VARS;
 
@@ -131,7 +131,7 @@ PHP_FUNCTION( datefmt_set_pattern )
 	size_t      value_len = 0;
 	int32_t     slength = 0;
 	UChar*	    svalue  = NULL;
-	zend_bool   is_pattern_localized =FALSE;
+	zend_bool   is_pattern_localized = false;
 
 
 	DATE_FORMAT_METHOD_INIT_VARS;
@@ -227,7 +227,7 @@ PHP_FUNCTION( datefmt_is_lenient )
  */
 PHP_FUNCTION( datefmt_set_lenient )
 {
-	zend_bool isLenient  = FALSE;
+	zend_bool isLenient  = false;
 
 	DATE_FORMAT_METHOD_INIT_VARS;
 
diff -urNp php-7.2.34-orig/ext/intl/normalizer/normalizer_normalize.c php-7.2.34-dwok/ext/intl/normalizer/normalizer_normalize.c
--- php-7.2.34-orig/ext/intl/normalizer/normalizer_normalize.c	2020-12-08 21:09:55.957605577 +0100
+++ php-7.2.34-dwok/ext/intl/normalizer/normalizer_normalize.c	2020-12-08 21:10:22.970015649 +0100
@@ -160,7 +160,7 @@
 	}
 
 	/* Return it. */
-	RETVAL_STRINGL( ret_buf, ret_len, FALSE );
+	RETVAL_STRINGL( ret_buf, ret_len, false );
 }
 /* }}} */

@@ -180,7 +180,7 @@
 	int		uinput_len = 0;
 	UErrorCode	status = U_ZERO_ERROR;
 		
-	UBool		uret = FALSE;
+	UBool		uret = false;
 		
 	intl_error_reset( NULL TSRMLS_CC );

diff -urNp php-7.2.34-orig/ext/intl/timezone/timezone_class.cpp php-7.2.34-dwok/ext/intl/timezone/timezone_class.cpp
--- php-7.2.34-orig/ext/intl/timezone/timezone_class.cpp	2020-12-08 21:09:55.965605699 +0100
+++ php-7.2.34-dwok/ext/intl/timezone/timezone_class.cpp	2020-12-08 21:10:40.162276637 +0100
@@ -323,7 +323,7 @@ static HashTable *TimeZone_get_debug_inf
 
 	int32_t rawOffset, dstOffset;
 	UDate now = Calendar::getNow();
-	tz->getOffset(now, FALSE, rawOffset, dstOffset, uec);
+	tz->getOffset(now, false, rawOffset, dstOffset, uec);
 	if (U_FAILURE(uec)) {
 		return debug_info;
 	}
diff -urNp php-7.2.34-orig/ext/intl/timezone/timezone_methods.cpp php-7.2.34-dwok/ext/intl/timezone/timezone_methods.cpp
--- php-7.2.34-orig/ext/intl/timezone/timezone_methods.cpp	2020-12-08 21:09:55.965605699 +0100
+++ php-7.2.34-dwok/ext/intl/timezone/timezone_methods.cpp	2020-12-08 21:10:48.322400508 +0100
@@ -95,7 +95,7 @@ U_CFUNC PHP_FUNCTION(intltz_from_date_ti
 		RETURN_NULL();
 	}
 
-	tz = timezone_convert_datetimezone(tzobj->type, tzobj, FALSE, NULL,
+	tz = timezone_convert_datetimezone(tzobj->type, tzobj, false, NULL,
 		"intltz_from_date_time_zone" TSRMLS_CC);
 	if (tz == NULL) {
 		RETURN_NULL();
--- php-5.6.40-orig/ext/intl/collator/collator_locale.c	2021-04-30 09:01:51.363884994 +0200
+++ php-5.6.40-new/ext/intl/collator/collator_locale.c	2021-04-30 09:02:14.043886457 +0200
@@ -66,7 +66,7 @@
 	COLLATOR_CHECK_STATUS( co, "Error getting locale by type" );
 
 	/* Return it. */
-	RETVAL_STRINGL( locale_name, strlen(locale_name), TRUE );
+	RETVAL_STRINGL( locale_name, strlen(locale_name), true );
 }
 /* }}} */
 
--- php-5.6.40-orig/ext/intl/collator/collator_convert.c 2021-04-30 09:00:59.673881702 +0200
+++ php-5.6.40-new/ext/intl/collator/collator_convert.c	2021-04-30 09:01:26.683883416 +0200
@@ -68,7 +68,7 @@
 
 	/* Update current hash item with the converted value. */
 	MAKE_STD_ZVAL( znew_val );
-	ZVAL_STRINGL( znew_val, (char*)new_val, UBYTES(new_val_len), FALSE );
+	ZVAL_STRINGL( znew_val, (char*)new_val, UBYTES(new_val_len), false );
 
 	if( hashKeyType == HASH_KEY_IS_STRING )
 	{
@@ -113,7 +113,7 @@
 
 	/* Update current hash item with the converted value. */
 	MAKE_STD_ZVAL( znew_val );
-	ZVAL_STRINGL( znew_val, (char*)new_val, new_val_len, FALSE );
+	ZVAL_STRINGL( znew_val, (char*)new_val, new_val_len, false );
 
 	if( hashKeyType == HASH_KEY_IS_STRING )
 	{
@@ -201,7 +201,7 @@
 		php_error( E_WARNING, "Error converting utf16 to utf8 in collator_convert_zval_utf16_to_utf8()" );
 
 	ALLOC_INIT_ZVAL( utf8_zval );
-	ZVAL_STRINGL( utf8_zval, str, str_len, FALSE );
+	ZVAL_STRINGL( utf8_zval, str, str_len, false );
 
 	return utf8_zval;
 }
@@ -232,7 +232,7 @@
 
 	/* Set string. */
 	ALLOC_INIT_ZVAL( zstr );
-	ZVAL_STRINGL( zstr, (char*)ustr, UBYTES(ustr_len), FALSE );
+	ZVAL_STRINGL( zstr, (char*)ustr, UBYTES(ustr_len), false );
 
 	return zstr;
 }
@@ -307,7 +307,7 @@
 	zval_dtor( zstr );
 
 	/* Set string. */
-	ZVAL_STRINGL( zstr, (char*)ustr, UBYTES(ustr_len), FALSE );
+	ZVAL_STRINGL( zstr, (char*)ustr, UBYTES(ustr_len), false );
 
 	/* Don't free ustr cause it's set in zstr without copy.
 	 * efree( ustr );
--- php-5.6.40-orig/ext/intl/collator/collator_error.c	2021-04-30 09:11:18.473924661 +0200
+++ php-5.6.40-new/ext/intl/collator/collator_error.c	2021-04-30 09:13:36.013932839 +0200
@@ -80,7 +80,7 @@
 
 	/* Return last error message. */
 	message = intl_error_get_message( COLLATOR_ERROR_P( co ) TSRMLS_CC );
-	RETURN_STRING( (char*)message, FALSE );
+	RETURN_STRING( (char*)message, false );
 }
 /* }}} */
 
--- php-5.6.40-orig/ext/intl/common/common_error.c	2021-04-30 09:11:53.833927336 +0200
+++ php-5.6.40-new/ext/intl/common/common_error.c	2021-04-30 09:14:13.843934481 +0200
@@ -38,7 +38,7 @@
 PHP_FUNCTION( intl_get_error_message )
 {
 	char* message = intl_error_get_message( NULL TSRMLS_CC );
-	RETURN_STRING( message, FALSE );
+	RETURN_STRING( message, false );
 }
 /* }}} */
 
--- php-5.6.40-orig/ext/intl/locale/locale_methods.c	2021-04-30 09:53:29.424074250 +0200
+++ php-5.6.40-new/ext/intl/locale/locale_methods.c	2021-04-30 09:54:34.934076176 +0200

@@ -211,7 +211,7 @@
    Get default locale */
 PHP_NAMED_FUNCTION(zif_locale_get_default)
 {
-	RETURN_STRING( intl_locale_get_default( TSRMLS_C ), TRUE );
+	RETURN_STRING( intl_locale_get_default( TSRMLS_C ), true );
 }
 
 /* }}} */
@@ -409,12 +409,12 @@
 		if( tag_value){
 			efree( tag_value);
 		}
-		RETURN_STRING( empty_result , TRUE);
+		RETURN_STRING( empty_result , true);
 	}
 
 	/* value found */
 	if( tag_value){
-		RETURN_STRING( tag_value , FALSE);
+		RETURN_STRING( tag_value , false);
 	}
 
 	/* Error encountered while fetching the value */
@@ -599,7 +599,7 @@
 		RETURN_FALSE;
 	}
 
-	RETVAL_STRINGL( utf8value, utf8value_len , FALSE);
+	RETVAL_STRINGL( utf8value, utf8value_len , false);
 
 }
 /* }}} */

@@ -1124,7 +1124,7 @@
 
 	grOffset =  findOffset( LOC_GRANDFATHERED , loc_name );
 	if( grOffset >= 0 ){
-		add_assoc_string( return_value , LOC_GRANDFATHERED_LANG_TAG , estrdup(loc_name) ,FALSE );
+		add_assoc_string( return_value , LOC_GRANDFATHERED_LANG_TAG , estrdup(loc_name) , false );
 	}
 	else{
 		/* Not grandfathered */
@@ -1062,11 +1062,11 @@
 			}
 			cur_key_name = (char*)ecalloc( 25,  25);
 			sprintf( cur_key_name , "%s%d", key_name , cnt++);
-			add_assoc_string( hash_arr, cur_key_name , token ,TRUE );
+			add_assoc_string( hash_arr, cur_key_name , token , true );
 			/* tokenize on the "_" or "-" and stop  at singleton if any */
 			while( (token = php_strtok_r(NULL , DELIMITER , &last_ptr)) && (strlen(token)>1) ){
 				sprintf( cur_key_name , "%s%d", key_name , cnt++);
-				add_assoc_string( hash_arr, cur_key_name , token , TRUE );
+				add_assoc_string( hash_arr, cur_key_name , token , true );
 			}
 /*
 			if( strcmp(key_name, LOC_PRIVATE_TAG) == 0 ){
@@ -1075,7 +1075,7 @@
 		}
 	} else {
 		if( result == 1 ){
-			add_assoc_string( hash_arr, key_name , key_value , TRUE );
+			add_assoc_string( hash_arr, key_name , key_value , true );
 			cur_result = 1;
 		}
 	}
@@ -1124,7 +1124,7 @@
 
 	grOffset =  findOffset( LOC_GRANDFATHERED , loc_name );
 	if( grOffset >= 0 ){
-		add_assoc_string( return_value , LOC_GRANDFATHERED_LANG_TAG , estrdup(loc_name) ,FALSE );
+		add_assoc_string( return_value , LOC_GRANDFATHERED_LANG_TAG , estrdup(loc_name) , false );
 	}
 	else{
 		/* Not grandfathered */
@@ -1182,10 +1182,10 @@
 		if( result > 0 && variant){
 			/* Tokenize on the "_" or "-" */
 			token = php_strtok_r( variant , DELIMITER , &saved_ptr);
-			add_next_index_stringl( return_value, token , strlen(token) ,TRUE );
+			add_next_index_stringl( return_value, token , strlen(token) , true );
 			/* tokenize on the "_" or "-" and stop  at singleton if any	*/
 			while( (token = php_strtok_r(NULL , DELIMITER, &saved_ptr)) && (strlen(token)>1) ){
- 				add_next_index_stringl( return_value, token , strlen(token) ,TRUE );
+ 				add_next_index_stringl( return_value, token , strlen(token) , true );
 			}
 		}
 		if( variant ){
--- php-5.6.40-orig/ext/intl/locale/locale_methods.c	2021-04-30 10:05:27.734100136 +0200
+++ php-5.6.40-new/ext/intl/locale/locale_methods.c	2021-04-30 10:07:14.904106681 +0200
@@ -1062,11 +1062,11 @@
 			}
 			cur_key_name = (char*)ecalloc( 25,  25);
 			sprintf( cur_key_name , "%s%d", key_name , cnt++);
-			add_assoc_string( hash_arr, cur_key_name , token ,TRUE );
+			add_assoc_string( hash_arr, cur_key_name , token , true );
 			/* tokenize on the "_" or "-" and stop  at singleton if any */
 			while( (token = php_strtok_r(NULL , DELIMITER , &last_ptr)) && (strlen(token)>1) ){
 				sprintf( cur_key_name , "%s%d", key_name , cnt++);
-				add_assoc_string( hash_arr, cur_key_name , token , TRUE );
+				add_assoc_string( hash_arr, cur_key_name , token , true );
 			}
 /*
 			if( strcmp(key_name, LOC_PRIVATE_TAG) == 0 ){
@@ -1075,7 +1075,7 @@
 		}
 	} else {
 		if( result == 1 ){
-			add_assoc_string( hash_arr, key_name , key_value , TRUE );
+			add_assoc_string( hash_arr, key_name , key_value , true );
 			cur_result = 1;
 		}
 	}
@@ -1124,7 +1124,7 @@
 
 	grOffset =  findOffset( LOC_GRANDFATHERED , loc_name );
 	if( grOffset >= 0 ){
-		add_assoc_string( return_value , LOC_GRANDFATHERED_LANG_TAG , estrdup(loc_name) ,FALSE );
+		add_assoc_string( return_value , LOC_GRANDFATHERED_LANG_TAG , estrdup(loc_name) , false );
 	}
 	else{
 		/* Not grandfathered */
@@ -1182,10 +1182,10 @@
 		if( result > 0 && variant){
 			/* Tokenize on the "_" or "-" */
 			token = php_strtok_r( variant , DELIMITER , &saved_ptr);
-			add_next_index_stringl( return_value, token , strlen(token) ,TRUE );
+			add_next_index_stringl( return_value, token , strlen(token) , true );
 			/* tokenize on the "_" or "-" and stop  at singleton if any	*/
 			while( (token = php_strtok_r(NULL , DELIMITER, &saved_ptr)) && (strlen(token)>1) ){
- 				add_next_index_stringl( return_value, token , strlen(token) ,TRUE );
+ 				add_next_index_stringl( return_value, token , strlen(token) , true );
 			}
 		}
 		if( variant ){
